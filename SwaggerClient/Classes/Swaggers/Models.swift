// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [Beneficiario]
            Decoders.addDecoder(clazz: [Beneficiario].self) { (source: AnyObject) -> [Beneficiario] in
                return Decoders.decode(clazz: [Beneficiario].self, source: source)
            }
            // Decoder for Beneficiario
            Decoders.addDecoder(clazz: Beneficiario.self) { (source: AnyObject) -> Beneficiario in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Beneficiario()
                instance.beneficiario = Decoders.decodeOptional(clazz: TransferenciascadastrosBeneficiario.self, source: sourceDictionary["beneficiario"])
                return instance
            }


            // Decoder for [Boleto]
            Decoders.addDecoder(clazz: [Boleto].self) { (source: AnyObject) -> [Boleto] in
                return Decoders.decode(clazz: [Boleto].self, source: source)
            }
            // Decoder for Boleto
            Decoders.addDecoder(clazz: Boleto.self) { (source: AnyObject) -> Boleto in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Boleto()
                instance.pagamento = Decoders.decodeOptional(clazz: PagamentosPagamento.self, source: sourceDictionary["pagamento"])
                return instance
            }


            // Decoder for [CadastroBenificiario]
            Decoders.addDecoder(clazz: [CadastroBenificiario].self) { (source: AnyObject) -> [CadastroBenificiario] in
                return Decoders.decode(clazz: [CadastroBenificiario].self, source: source)
            }
            // Decoder for CadastroBenificiario
            Decoders.addDecoder(clazz: CadastroBenificiario.self) { (source: AnyObject) -> CadastroBenificiario in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CadastroBenificiario()
                instance.idCartao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartao"])
                instance.idCartaoDestino = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartaoDestino"])
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                instance.cpf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cpf"])
                return instance
            }


            // Decoder for [Cartao]
            Decoders.addDecoder(clazz: [Cartao].self) { (source: AnyObject) -> [Cartao] in
                return Decoders.decode(clazz: [Cartao].self, source: source)
            }
            // Decoder for Cartao
            Decoders.addDecoder(clazz: Cartao.self) { (source: AnyObject) -> Cartao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Cartao()
                instance.cartao = Decoders.decodeOptional(clazz: CartoesCartao.self, source: sourceDictionary["cartao"])
                return instance
            }


            // Decoder for [CartoesCartao]
            Decoders.addDecoder(clazz: [CartoesCartao].self) { (source: AnyObject) -> [CartoesCartao] in
                return Decoders.decode(clazz: [CartoesCartao].self, source: source)
            }
            // Decoder for CartoesCartao
            Decoders.addDecoder(clazz: CartoesCartao.self) { (source: AnyObject) -> CartoesCartao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartoesCartao()
                instance.idCartao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartao"])
                instance.valor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valor"])
                instance.contrasenha = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contrasenha"])
                instance.portador = Decoders.decodeOptional(clazz: CartoesCartaoPortador.self, source: sourceDictionary["portador"])
                return instance
            }


            // Decoder for [CartoesCartaoPortador]
            Decoders.addDecoder(clazz: [CartoesCartaoPortador].self) { (source: AnyObject) -> [CartoesCartaoPortador] in
                return Decoders.decode(clazz: [CartoesCartaoPortador].self, source: source)
            }
            // Decoder for CartoesCartaoPortador
            Decoders.addDecoder(clazz: CartoesCartaoPortador.self) { (source: AnyObject) -> CartoesCartaoPortador in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartoesCartaoPortador()
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                instance.sobrenome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sobrenome"])
                instance.dataNascimento = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataNascimento"])
                instance.cpf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cpf"])
                instance.contato = Decoders.decodeOptional(clazz: CartoesCartaoPortadorContato.self, source: sourceDictionary["contato"])
                instance.endereco = Decoders.decodeOptional(clazz: CartoesCartaoPortadorEndereco.self, source: sourceDictionary["endereco"])
                return instance
            }


            // Decoder for [CartoesCartaoPortadorContato]
            Decoders.addDecoder(clazz: [CartoesCartaoPortadorContato].self) { (source: AnyObject) -> [CartoesCartaoPortadorContato] in
                return Decoders.decode(clazz: [CartoesCartaoPortadorContato].self, source: source)
            }
            // Decoder for CartoesCartaoPortadorContato
            Decoders.addDecoder(clazz: CartoesCartaoPortadorContato.self) { (source: AnyObject) -> CartoesCartaoPortadorContato in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartoesCartaoPortadorContato()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.telResidencial = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["telResidencial"])
                instance.telCelular = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["telCelular"])
                return instance
            }


            // Decoder for [CartoesCartaoPortadorEndereco]
            Decoders.addDecoder(clazz: [CartoesCartaoPortadorEndereco].self) { (source: AnyObject) -> [CartoesCartaoPortadorEndereco] in
                return Decoders.decode(clazz: [CartoesCartaoPortadorEndereco].self, source: source)
            }
            // Decoder for CartoesCartaoPortadorEndereco
            Decoders.addDecoder(clazz: CartoesCartaoPortadorEndereco.self) { (source: AnyObject) -> CartoesCartaoPortadorEndereco in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartoesCartaoPortadorEndereco()
                instance.logradouro = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logradouro"])
                instance.complemento = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["complemento"])
                instance.cidade = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cidade"])
                instance.estado = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["estado"])
                instance.pais = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pais"])
                instance.codigoPostal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codigoPostal"])
                return instance
            }


            // Decoder for [CartoesidCartaosaldoSaldo]
            Decoders.addDecoder(clazz: [CartoesidCartaosaldoSaldo].self) { (source: AnyObject) -> [CartoesidCartaosaldoSaldo] in
                return Decoders.decode(clazz: [CartoesidCartaosaldoSaldo].self, source: source)
            }
            // Decoder for CartoesidCartaosaldoSaldo
            Decoders.addDecoder(clazz: CartoesidCartaosaldoSaldo.self) { (source: AnyObject) -> CartoesidCartaosaldoSaldo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartoesidCartaosaldoSaldo()
                instance.valor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valor"])
                return instance
            }


            // Decoder for [DetalhamentoExtrato]
            Decoders.addDecoder(clazz: [DetalhamentoExtrato].self) { (source: AnyObject) -> [DetalhamentoExtrato] in
                return Decoders.decode(clazz: [DetalhamentoExtrato].self, source: source)
            }
            // Decoder for DetalhamentoExtrato
            Decoders.addDecoder(clazz: DetalhamentoExtrato.self) { (source: AnyObject) -> DetalhamentoExtrato in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DetalhamentoExtrato()
                instance.dataHora = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dataHora"])
                instance.estabelecimento = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["estabelecimento"])
                instance.tipo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tipo"])
                instance.valor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valor"])
                return instance
            }


            // Decoder for [EnderecoPortador]
            Decoders.addDecoder(clazz: [EnderecoPortador].self) { (source: AnyObject) -> [EnderecoPortador] in
                return Decoders.decode(clazz: [EnderecoPortador].self, source: source)
            }
            // Decoder for EnderecoPortador
            Decoders.addDecoder(clazz: EnderecoPortador.self) { (source: AnyObject) -> EnderecoPortador in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EnderecoPortador()
                instance.logradouro = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logradouro"])
                instance.cidade = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cidade"])
                instance.estado = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["estado"])
                instance.codigoPostal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codigoPostal"])
                return instance
            }


            // Decoder for [ExtratoResponse]
            Decoders.addDecoder(clazz: [ExtratoResponse].self) { (source: AnyObject) -> [ExtratoResponse] in
                return Decoders.decode(clazz: [ExtratoResponse].self, source: source)
            }
            // Decoder for ExtratoResponse
            Decoders.addDecoder(clazz: ExtratoResponse.self) { (source: AnyObject) -> ExtratoResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExtratoResponse()
                instance.extrato = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["extrato"])
                return instance
            }


            // Decoder for [InlineResponse200]
            Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject) -> [InlineResponse200] in
                return Decoders.decode(clazz: [InlineResponse200].self, source: source)
            }
            // Decoder for InlineResponse200
            Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject) -> InlineResponse200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200()
                instance.saldo = Decoders.decodeOptional(clazz: InlineResponse200Saldo.self, source: sourceDictionary["saldo"])
                return instance
            }


            // Decoder for [InlineResponse2001]
            Decoders.addDecoder(clazz: [InlineResponse2001].self) { (source: AnyObject) -> [InlineResponse2001] in
                return Decoders.decode(clazz: [InlineResponse2001].self, source: source)
            }
            // Decoder for InlineResponse2001
            Decoders.addDecoder(clazz: InlineResponse2001.self) { (source: AnyObject) -> InlineResponse2001 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001()
                instance.extrato = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["extrato"])
                return instance
            }


            // Decoder for [InlineResponse2001Extrato]
            Decoders.addDecoder(clazz: [InlineResponse2001Extrato].self) { (source: AnyObject) -> [InlineResponse2001Extrato] in
                return Decoders.decode(clazz: [InlineResponse2001Extrato].self, source: source)
            }
            // Decoder for InlineResponse2001Extrato
            Decoders.addDecoder(clazz: InlineResponse2001Extrato.self) { (source: AnyObject) -> InlineResponse2001Extrato in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001Extrato()
                instance.dataHora = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dataHora"])
                instance.estabelecimento = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["estabelecimento"])
                instance.tipo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tipo"])
                instance.valor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valor"])
                return instance
            }


            // Decoder for [InlineResponse2002]
            Decoders.addDecoder(clazz: [InlineResponse2002].self) { (source: AnyObject) -> [InlineResponse2002] in
                return Decoders.decode(clazz: [InlineResponse2002].self, source: source)
            }
            // Decoder for InlineResponse2002
            Decoders.addDecoder(clazz: InlineResponse2002.self) { (source: AnyObject) -> InlineResponse2002 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2002()
                instance.portador = Decoders.decodeOptional(clazz: InlineResponse2002Portador.self, source: sourceDictionary["portador"])
                return instance
            }


            // Decoder for [InlineResponse2002Portador]
            Decoders.addDecoder(clazz: [InlineResponse2002Portador].self) { (source: AnyObject) -> [InlineResponse2002Portador] in
                return Decoders.decode(clazz: [InlineResponse2002Portador].self, source: source)
            }
            // Decoder for InlineResponse2002Portador
            Decoders.addDecoder(clazz: InlineResponse2002Portador.self) { (source: AnyObject) -> InlineResponse2002Portador in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2002Portador()
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.celular = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["celular"])
                instance.endereco = Decoders.decodeOptional(clazz: InlineResponse2002PortadorEndereco.self, source: sourceDictionary["endereco"])
                return instance
            }


            // Decoder for [InlineResponse2002PortadorEndereco]
            Decoders.addDecoder(clazz: [InlineResponse2002PortadorEndereco].self) { (source: AnyObject) -> [InlineResponse2002PortadorEndereco] in
                return Decoders.decode(clazz: [InlineResponse2002PortadorEndereco].self, source: source)
            }
            // Decoder for InlineResponse2002PortadorEndereco
            Decoders.addDecoder(clazz: InlineResponse2002PortadorEndereco.self) { (source: AnyObject) -> InlineResponse2002PortadorEndereco in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2002PortadorEndereco()
                instance.logradouro = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logradouro"])
                instance.cidade = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cidade"])
                instance.estado = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["estado"])
                instance.codigoPostal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codigoPostal"])
                return instance
            }


            // Decoder for [InlineResponse2003]
            Decoders.addDecoder(clazz: [InlineResponse2003].self) { (source: AnyObject) -> [InlineResponse2003] in
                return Decoders.decode(clazz: [InlineResponse2003].self, source: source)
            }
            // Decoder for InlineResponse2003
            Decoders.addDecoder(clazz: InlineResponse2003.self) { (source: AnyObject) -> InlineResponse2003 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2003()
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [InlineResponse200Saldo]
            Decoders.addDecoder(clazz: [InlineResponse200Saldo].self) { (source: AnyObject) -> [InlineResponse200Saldo] in
                return Decoders.decode(clazz: [InlineResponse200Saldo].self, source: source)
            }
            // Decoder for InlineResponse200Saldo
            Decoders.addDecoder(clazz: InlineResponse200Saldo.self) { (source: AnyObject) -> InlineResponse200Saldo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200Saldo()
                instance.valor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valor"])
                return instance
            }


            // Decoder for [InlineResponse400]
            Decoders.addDecoder(clazz: [InlineResponse400].self) { (source: AnyObject) -> [InlineResponse400] in
                return Decoders.decode(clazz: [InlineResponse400].self, source: source)
            }
            // Decoder for InlineResponse400
            Decoders.addDecoder(clazz: InlineResponse400.self) { (source: AnyObject) -> InlineResponse400 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse400()
                instance.mensagem = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mensagem"])
                return instance
            }


            // Decoder for [MsgErro]
            Decoders.addDecoder(clazz: [MsgErro].self) { (source: AnyObject) -> [MsgErro] in
                return Decoders.decode(clazz: [MsgErro].self, source: source)
            }
            // Decoder for MsgErro
            Decoders.addDecoder(clazz: MsgErro.self) { (source: AnyObject) -> MsgErro in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgErro()
                instance.mensagem = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mensagem"])
                return instance
            }


            // Decoder for [NovoCartao]
            Decoders.addDecoder(clazz: [NovoCartao].self) { (source: AnyObject) -> [NovoCartao] in
                return Decoders.decode(clazz: [NovoCartao].self, source: source)
            }
            // Decoder for NovoCartao
            Decoders.addDecoder(clazz: NovoCartao.self) { (source: AnyObject) -> NovoCartao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NovoCartao()
                instance.idCartao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartao"])
                instance.valor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valor"])
                instance.contrasenha = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contrasenha"])
                instance.portador = Decoders.decodeOptional(clazz: CartoesCartaoPortador.self, source: sourceDictionary["portador"])
                return instance
            }


            // Decoder for [NovoCartaoPortador]
            Decoders.addDecoder(clazz: [NovoCartaoPortador].self) { (source: AnyObject) -> [NovoCartaoPortador] in
                return Decoders.decode(clazz: [NovoCartaoPortador].self, source: source)
            }
            // Decoder for NovoCartaoPortador
            Decoders.addDecoder(clazz: NovoCartaoPortador.self) { (source: AnyObject) -> NovoCartaoPortador in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NovoCartaoPortador()
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                instance.sobrenome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sobrenome"])
                instance.dataNascimento = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dataNascimento"])
                instance.cpf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cpf"])
                instance.contato = Decoders.decodeOptional(clazz: CartoesCartaoPortadorContato.self, source: sourceDictionary["contato"])
                instance.endereco = Decoders.decodeOptional(clazz: CartoesCartaoPortadorEndereco.self, source: sourceDictionary["endereco"])
                return instance
            }


            // Decoder for [NovoCartaoPortadorContato]
            Decoders.addDecoder(clazz: [NovoCartaoPortadorContato].self) { (source: AnyObject) -> [NovoCartaoPortadorContato] in
                return Decoders.decode(clazz: [NovoCartaoPortadorContato].self, source: source)
            }
            // Decoder for NovoCartaoPortadorContato
            Decoders.addDecoder(clazz: NovoCartaoPortadorContato.self) { (source: AnyObject) -> NovoCartaoPortadorContato in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NovoCartaoPortadorContato()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.telResidencial = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["telResidencial"])
                instance.telCelular = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["telCelular"])
                return instance
            }


            // Decoder for [NovoCartaoPortadorEndereco]
            Decoders.addDecoder(clazz: [NovoCartaoPortadorEndereco].self) { (source: AnyObject) -> [NovoCartaoPortadorEndereco] in
                return Decoders.decode(clazz: [NovoCartaoPortadorEndereco].self, source: source)
            }
            // Decoder for NovoCartaoPortadorEndereco
            Decoders.addDecoder(clazz: NovoCartaoPortadorEndereco.self) { (source: AnyObject) -> NovoCartaoPortadorEndereco in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NovoCartaoPortadorEndereco()
                instance.logradouro = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logradouro"])
                instance.complemento = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["complemento"])
                instance.cidade = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cidade"])
                instance.estado = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["estado"])
                instance.pais = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pais"])
                instance.codigoPostal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codigoPostal"])
                return instance
            }


            // Decoder for [Pagamento]
            Decoders.addDecoder(clazz: [Pagamento].self) { (source: AnyObject) -> [Pagamento] in
                return Decoders.decode(clazz: [Pagamento].self, source: source)
            }
            // Decoder for Pagamento
            Decoders.addDecoder(clazz: Pagamento.self) { (source: AnyObject) -> Pagamento in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Pagamento()
                instance.pagamento = Decoders.decodeOptional(clazz: PagamentosPagamento.self, source: sourceDictionary["pagamento"])
                return instance
            }


            // Decoder for [PagamentosPagamento]
            Decoders.addDecoder(clazz: [PagamentosPagamento].self) { (source: AnyObject) -> [PagamentosPagamento] in
                return Decoders.decode(clazz: [PagamentosPagamento].self, source: source)
            }
            // Decoder for PagamentosPagamento
            Decoders.addDecoder(clazz: PagamentosPagamento.self) { (source: AnyObject) -> PagamentosPagamento in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PagamentosPagamento()
                instance.idCartao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartao"])
                instance.senha = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["senha"])
                instance.codigoBarras = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codigoBarras"])
                return instance
            }


            // Decoder for [Portador]
            Decoders.addDecoder(clazz: [Portador].self) { (source: AnyObject) -> [Portador] in
                return Decoders.decode(clazz: [Portador].self, source: source)
            }
            // Decoder for Portador
            Decoders.addDecoder(clazz: Portador.self) { (source: AnyObject) -> Portador in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Portador()
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.celular = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["celular"])
                instance.endereco = Decoders.decodeOptional(clazz: InlineResponse2002PortadorEndereco.self, source: sourceDictionary["endereco"])
                return instance
            }


            // Decoder for [PortadorResponse]
            Decoders.addDecoder(clazz: [PortadorResponse].self) { (source: AnyObject) -> [PortadorResponse] in
                return Decoders.decode(clazz: [PortadorResponse].self, source: source)
            }
            // Decoder for PortadorResponse
            Decoders.addDecoder(clazz: PortadorResponse.self) { (source: AnyObject) -> PortadorResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PortadorResponse()
                instance.portador = Decoders.decodeOptional(clazz: InlineResponse2002Portador.self, source: sourceDictionary["portador"])
                return instance
            }


            // Decoder for [Saldo]
            Decoders.addDecoder(clazz: [Saldo].self) { (source: AnyObject) -> [Saldo] in
                return Decoders.decode(clazz: [Saldo].self, source: source)
            }
            // Decoder for Saldo
            Decoders.addDecoder(clazz: Saldo.self) { (source: AnyObject) -> Saldo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Saldo()
                instance.saldo = Decoders.decodeOptional(clazz: CartoesidCartaosaldoSaldo.self, source: sourceDictionary["saldo"])
                return instance
            }


            // Decoder for [SetCardStatus]
            Decoders.addDecoder(clazz: [SetCardStatus].self) { (source: AnyObject) -> [SetCardStatus] in
                return Decoders.decode(clazz: [SetCardStatus].self, source: source)
            }
            // Decoder for SetCardStatus
            Decoders.addDecoder(clazz: SetCardStatus.self) { (source: AnyObject) -> SetCardStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SetCardStatus()
                instance.status = SetCardStatus.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                return instance
            }


            // Decoder for [SetNovoCartao]
            Decoders.addDecoder(clazz: [SetNovoCartao].self) { (source: AnyObject) -> [SetNovoCartao] in
                return Decoders.decode(clazz: [SetNovoCartao].self, source: source)
            }
            // Decoder for SetNovoCartao
            Decoders.addDecoder(clazz: SetNovoCartao.self) { (source: AnyObject) -> SetNovoCartao in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SetNovoCartao()
                instance.cartao = Decoders.decodeOptional(clazz: CartoesCartao.self, source: sourceDictionary["cartao"])
                return instance
            }


            // Decoder for [SetPagamento]
            Decoders.addDecoder(clazz: [SetPagamento].self) { (source: AnyObject) -> [SetPagamento] in
                return Decoders.decode(clazz: [SetPagamento].self, source: source)
            }
            // Decoder for SetPagamento
            Decoders.addDecoder(clazz: SetPagamento.self) { (source: AnyObject) -> SetPagamento in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SetPagamento()
                instance.idCartao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartao"])
                instance.senha = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["senha"])
                instance.codigoBarras = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codigoBarras"])
                return instance
            }


            // Decoder for [SetSaldo]
            Decoders.addDecoder(clazz: [SetSaldo].self) { (source: AnyObject) -> [SetSaldo] in
                return Decoders.decode(clazz: [SetSaldo].self, source: source)
            }
            // Decoder for SetSaldo
            Decoders.addDecoder(clazz: SetSaldo.self) { (source: AnyObject) -> SetSaldo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SetSaldo()
                instance.saldo = Decoders.decodeOptional(clazz: CartoesidCartaosaldoSaldo.self, source: sourceDictionary["saldo"])
                return instance
            }


            // Decoder for [SetSaldoValor]
            Decoders.addDecoder(clazz: [SetSaldoValor].self) { (source: AnyObject) -> [SetSaldoValor] in
                return Decoders.decode(clazz: [SetSaldoValor].self, source: source)
            }
            // Decoder for SetSaldoValor
            Decoders.addDecoder(clazz: SetSaldoValor.self) { (source: AnyObject) -> SetSaldoValor in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SetSaldoValor()
                instance.valor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valor"])
                return instance
            }


            // Decoder for [SetTransferencia]
            Decoders.addDecoder(clazz: [SetTransferencia].self) { (source: AnyObject) -> [SetTransferencia] in
                return Decoders.decode(clazz: [SetTransferencia].self, source: source)
            }
            // Decoder for SetTransferencia
            Decoders.addDecoder(clazz: SetTransferencia.self) { (source: AnyObject) -> SetTransferencia in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SetTransferencia()
                instance.idCartao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartao"])
                instance.idCartaoDestino = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartaoDestino"])
                instance.valor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valor"])
                instance.senha = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["senha"])
                return instance
            }


            // Decoder for [Status]
            Decoders.addDecoder(clazz: [Status].self) { (source: AnyObject) -> [Status] in
                return Decoders.decode(clazz: [Status].self, source: source)
            }
            // Decoder for Status
            Decoders.addDecoder(clazz: Status.self) { (source: AnyObject) -> Status in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Status()
                instance.status = Status.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                return instance
            }


            // Decoder for [StatusCartaoResponse]
            Decoders.addDecoder(clazz: [StatusCartaoResponse].self) { (source: AnyObject) -> [StatusCartaoResponse] in
                return Decoders.decode(clazz: [StatusCartaoResponse].self, source: source)
            }
            // Decoder for StatusCartaoResponse
            Decoders.addDecoder(clazz: StatusCartaoResponse.self) { (source: AnyObject) -> StatusCartaoResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StatusCartaoResponse()
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [Transferencia]
            Decoders.addDecoder(clazz: [Transferencia].self) { (source: AnyObject) -> [Transferencia] in
                return Decoders.decode(clazz: [Transferencia].self, source: source)
            }
            // Decoder for Transferencia
            Decoders.addDecoder(clazz: Transferencia.self) { (source: AnyObject) -> Transferencia in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Transferencia()
                instance.transferencia = Decoders.decodeOptional(clazz: TransferenciasTransferencia.self, source: sourceDictionary["transferencia"])
                return instance
            }


            // Decoder for [TransferenciaCadastroBenificiario]
            Decoders.addDecoder(clazz: [TransferenciaCadastroBenificiario].self) { (source: AnyObject) -> [TransferenciaCadastroBenificiario] in
                return Decoders.decode(clazz: [TransferenciaCadastroBenificiario].self, source: source)
            }
            // Decoder for TransferenciaCadastroBenificiario
            Decoders.addDecoder(clazz: TransferenciaCadastroBenificiario.self) { (source: AnyObject) -> TransferenciaCadastroBenificiario in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TransferenciaCadastroBenificiario()
                instance.beneficiario = Decoders.decodeOptional(clazz: TransferenciascadastrosBeneficiario.self, source: sourceDictionary["beneficiario"])
                return instance
            }


            // Decoder for [TransferenciasTransferencia]
            Decoders.addDecoder(clazz: [TransferenciasTransferencia].self) { (source: AnyObject) -> [TransferenciasTransferencia] in
                return Decoders.decode(clazz: [TransferenciasTransferencia].self, source: source)
            }
            // Decoder for TransferenciasTransferencia
            Decoders.addDecoder(clazz: TransferenciasTransferencia.self) { (source: AnyObject) -> TransferenciasTransferencia in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TransferenciasTransferencia()
                instance.idCartao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartao"])
                instance.idCartaoDestino = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartaoDestino"])
                instance.valor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valor"])
                instance.senha = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["senha"])
                return instance
            }


            // Decoder for [TransferenciascadastrosBeneficiario]
            Decoders.addDecoder(clazz: [TransferenciascadastrosBeneficiario].self) { (source: AnyObject) -> [TransferenciascadastrosBeneficiario] in
                return Decoders.decode(clazz: [TransferenciascadastrosBeneficiario].self, source: source)
            }
            // Decoder for TransferenciascadastrosBeneficiario
            Decoders.addDecoder(clazz: TransferenciascadastrosBeneficiario.self) { (source: AnyObject) -> TransferenciascadastrosBeneficiario in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TransferenciascadastrosBeneficiario()
                instance.idCartao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartao"])
                instance.idCartaoDestino = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["idCartaoDestino"])
                instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"])
                instance.cpf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cpf"])
                return instance
            }


            // Decoder for [Valor]
            Decoders.addDecoder(clazz: [Valor].self) { (source: AnyObject) -> [Valor] in
                return Decoders.decode(clazz: [Valor].self, source: source)
            }
            // Decoder for Valor
            Decoders.addDecoder(clazz: Valor.self) { (source: AnyObject) -> Valor in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Valor()
                instance.valor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valor"])
                return instance
            }
        }
    }
}
